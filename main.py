# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xh53hbu7IUzHyg9naD221zCT32nAaMcm
"""

import pandas as pd

#데이터 읽어오기
train = pd.read_csv("./train.csv")
test = pd.read_csv("./test.csv")

#데이터 프레임 확인
#train_head()
#test.head()
#train.describe()

#누락된 값 확인
train.isnull().sum()
test.isnull().sum()

#전처리(sex,age, embarked, name, cabin, fare, sibsp, parch, ticket)(9)

#sex
#성별을 숫자로 매핑
sex_map = {"male": 0, "female": 1}
train['Sex'] = train['Sex'].map(sex_map)
test['Sex'] = test['Sex'].map(sex_map)

#Age
#누락된 값 평균으로 채우기
train["Age"] = train["Age"].fillna(train["Age"].mean())
test["Age"] = test["Age"].fillna(test["Age"].mean())

# Pclass
#hot encoding 적용
train['Pclass_3']=(train['Pclass']==3)
train['Pclass_2']=(train['Pclass']==2)
train['Pclass_1']=(train['Pclass']==1)

test['Pclass_3']=(test['Pclass']==3)
test['Pclass_2']=(test['Pclass']==2)
test['Pclass_1']=(test['Pclass']==1)

train=train.drop(columns='Pclass')
test=test.drop(columns='Pclass')

#기타 다른 값들 제거
train = train.drop(['Cabin', 'Embarked', 'Name', 'Ticket', 'PassengerId'],axis=1)
test = test.drop(['Cabin', 'Embarked', 'Name', 'Ticket'],axis=1)

train.isnull().sum()

test.isnull().sum()

age_mean = train['Age'].mean()
age_std = train['Age'].std()
indexNames = train[train['Age'] < age_mean - 3*age_std].index
train.drop(indexNames , inplace=True)
indexNames = train[train['Age'] > age_mean + 3*age_std].index
train.drop(indexNames , inplace=True)

fare_mean = train['Fare'].mean()
fare_std = train['Fare'].std()
indexNames = train[train['Fare'] < fare_mean - 3*fare_std].index
train.drop(indexNames , inplace=True)
indexNames = train[train['Fare'] > fare_mean + 3*fare_std].index
train.drop(indexNames , inplace=True)

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()

train_input = train.drop(['Survived', 'Age', 'Parch', 'Fare', 'SibSp'], axis=1)
train_target = train['Survived']
lr.fit(train_input, train_target)

lr.coef_

predict = lr.predict(test.drop(['PassengerId', 'Age', 'Parch', 'Fare', 'SibSp'], axis=1))
rs =pd.DataFrame({
    'PassengerId': test['PassengerId'],
    'Survived': predict
})

print(rs)
rs.to_csv('result.csv', index=False)