# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xh53hbu7IUzHyg9naD221zCT32nAaMcm
"""

import pandas as pd

#데이터 읽어오기
train = pd.read_csv("./train.csv")
test = pd.read_csv("./test.csv")

#데이터 프레임 확인
#train.head()
#test.head()
#train.describe()

#누락된 값 확인(훈련 데이터)
print("train.isnull().sum")
train.isnull().sum()

#누락된 값 확인(테스트 데이터)
print("test.isnull().sum()")
test.isnull().sum()

#전처리(Sex,Age, Embarked, Name, Cabin, Fare, SibSp, Parch, Ticket, Pclass)(9)  not(PassengerId, Survived)(2)

#Sex=======================
#성별을 숫자로 매핑
sex_map = {"male": 0, "female": 1}
train['Sex'] = train['Sex'].map(sex_map)
test['Sex'] = test['Sex'].map(sex_map)

#Age(추가 시 점수 떨어짐)==============
train_test_data = [train, test] 
#누락된 값 평균으로 채우기
train["Age"] = train["Age"].fillna(train["Age"].mean())
test["Age"] = test["Age"].fillna(test["Age"].mean())
#나이별로 범위를 만들었음
for dataset in train_test_data:
  dataset.loc[dataset['Age'] <= 16, 'Age'] = 0
  dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1
  dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2
  dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3
  dataset.loc[ dataset['Age'] > 62, 'Age'] = 4


#Pclass
#one hot encoding 적용 하나 안하나 점수차이 X
#one-hot encoding 적용
'''
train['Pclass_3']=(train['Pclass']==3)
train['Pclass_2']=(train['Pclass']==2)
train['Pclass_1']=(train['Pclass']==1)

test['Pclass_3']=(test['Pclass']==3)
test['Pclass_2']=(test['Pclass']==2)
test['Pclass_1']=(test['Pclass']==1)

train=train.drop(columns='Pclass')
test=test.drop(columns='Pclass')
'''

#Fare(추가 시 점수 떨어짐)==============
#누락된 값 채우기 
train["Fare"] = train["Fare"].fillna(train["Fare"].mean())
test["Fare"] = test["Fare"].fillna(test["Fare"].mean())


#Family (새로운 칼럼, 있으나 없으나 점수차이 X) => (Solo칼럼을 만들기 위해서)===========
train['Family'] = 1 + train['SibSp'] + train['Parch']
test['Family'] = 1 + test['SibSp'] + test['Parch']

#Solo (새로운 칼럼, 추가 시 점수 오름)============
train['Solo'] = (train['Family'] == 1)
test['Solo'] = (test['Family'] == 1)

#Parch (제거 시 점수 떨어짐, 그대로 유지)=============

#SibSp(있으나 없으나 관계 X)==========

#Name==========
train_test_data = [train, test] 
for dataset in train_test_data:
    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)

#Mapping table을 통해서 Title이라는 새로운 column을 만들었습니다.
title_mapping = {"Mr": 0, "Miss": 1, "Mrs": 2, 
                 "Master": 3, "Dr": 3, "Rev": 3, "Col": 3, "Major": 3, "Mlle": 3,"Countess": 3,
                 "Ms": 3, "Lady": 3, "Jonkheer": 3, "Don": 3, "Dona" : 3, "Mme": 3,"Capt": 3,"Sir": 3 }
for dataset in train_test_data:
    dataset['Title'] = dataset['Title'].map(title_mapping)

#Name 칼럼에서 Title이라는 유용한 칼럼을 생성했기 때문에 기존 칼럼 제거
train.drop('Name', axis=1, inplace=True)
test.drop('Name', axis=1, inplace=True)

#Embarked ==============
#Embarked가 비어있으면 S를 채운다.
for dataset in train_test_data:
    dataset['Embarked'] = dataset['Embarked'].fillna('S')
# S는 0, C는 1, Q는 2라고 mapping
embarked_mapping = {"S": 0, "C": 1, "Q": 2}
for dataset in train_test_data:
    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)

#Fare ===============
#Fare는 Pclass와 관련이 있다고 생각한다. Pclass는 missing value가 없었기 때문에 Pclass의 가운데 값을 빠진 값에 넣어준다.
train["Fare"].fillna(train.groupby("Pclass")["Fare"].transform("median"), inplace=True)
test["Fare"].fillna(test.groupby("Pclass")["Fare"].transform("median"), inplace=True)

for dataset in train_test_data:
    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0
    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1
    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2
    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3

#Cabin===============
#소숫점으로 mapping한 이유는 숫자의 범위가 너무 크면 안되기 때문이다.
cabin_mapping = {"A": 0, "B": 0.4, "C": 0.8, "D": 1.2, "E": 1.6, "F": 2, "G": 2.4, "T": 2.8}
for dataset in train_test_data:
    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)
# Cabin의 Missing value들은 각 클래스별 Cabin의 중간값을 넣어준다.
#누락된 값 채우기 
train["Cabin"] = train["Cabin"].fillna(train["Cabin"].mean())
test["Cabin"] = test["Cabin"].fillna(test["Cabin"].mean())

#값 제거=========================
#생존과 관계없는 값들 제거
train = train.drop(['PassengerId','Ticket'],axis=1)
test = test.drop(['Ticket'],axis=1)
#추가 시 점수가 떨어지기에 제거
#train = train.drop([''], axis=1)
#test = test.drop([''], axis=1)

train.isnull().sum()

test.isnull().sum()

#이상치 제거 => 있으나 없으나 점수차이 x
'''
age_mean = train['Age'].mean()
age_std = train['Age'].std()
indexNames = train[train['Age'] < age_mean - 3*age_std].index
train.drop(indexNames , inplace=True)
indexNames = train[train['Age'] > age_mean + 3*age_std].index
train.drop(indexNames , inplace=True)

fare_mean = train['Fare'].mean()
fare_std = train['Fare'].std()
indexNames = train[train['Fare'] < fare_mean - 3*fare_std].index
train.drop(indexNames , inplace=True)
indexNames = train[train['Fare'] > fare_mean + 3*fare_std].index
train.drop(indexNames , inplace=True)
'''

#train_input, train_target
train_input = train.drop(['Survived'], axis=1)
train_target = train['Survived']

#로지스틱 Score: 0.77990
from sklearn.linear_model import LogisticRegression

lr = LogisticRegression()

lr.fit(train_input, train_target)

lr.coef_

predict = lr.predict(test.drop(['PassengerId'], axis=1))
rs =pd.DataFrame({
    'PassengerId': test['PassengerId'],
    'Survived': predict
})

#결정트리 Score:  0.76315
from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier(max_depth=4, random_state=42)
dt.fit(train_input, train_target)

predict = dt.predict(test.drop(['PassengerId'], axis=1))
rs =pd.DataFrame({
    'PassengerId': test['PassengerId'],
    'Survived': predict
})

#훈련 데이터로 훈련세트와 테스트세트 나누기(Score값 측정용)
from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(train.drop(['Survived'], axis=1), train['Survived'], random_state=42)

#Score값 측정
print(dt.score(train_input, train_target))
print(dt.score(test_input, test_target))

print(rs)
rs.to_csv('result1.csv', index=False)

#결과 데이터 프레임 확인
#train.drop(['Survived', 'Age', 'Parch', 'Fare','Family'], axis=1).head()
#test.head()
#train.describe()